name: 2 CD to AWS ECS, S3 and Prefect Cloud (Regular automated process)

on:
  pull_request:
    types:
      - opened
      - synchronize
      - reopened

env:
  PROJECT: dataflowops
  BLOCK: rend-prefect-s3
  PREFECT_VERSION: 2.*
  ECS_CLUSTER: prefect
  AWS_REGION: 'eu-north-1'
  ECS_TASK_DEFINITION: task-definition.json

jobs:
  info:
    name: Print out the branch info
    runs-on: ubuntu-latest
    steps:
      - name: print
        run: echo "This actioin is ran with branch_ref as" $GITHUB_REF "and the last commit hash" $GITHUB_SHA >> $GITHUB_STEP_SUMMARY
        
  # changes:
  #   name: Code & dependency changes
  #   runs-on: ubuntu-latest
  #   outputs:
  #     prefect_flows: ${{ steps.filter.outputs.flows_files }}
  #     prefect_flows_changed: ${{ steps.filter.outputs.flows }}
  #     code_dependencies_changed: ${{ steps.filter.outputs.code }}
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v3
  #     - name: Generate Markdown Summary
  #       run: echo "Starting CI/CD for flows and dependencies added/modified with commit $GITHUB_SHA" >> $GITHUB_STEP_SUMMARY
  #     - uses: dorny/paths-filter@v2
  #       id: filter
  #       with:
  #         list-files: json
  #         filters: |
  #           flows:
  #             - added|modified: 'flows/*.py'
  #           code:
  #             - added|modified: 'requirements.txt'
  #             - added|modified: 'Dockerfile'
  #     - name: Generate Markdown Summary
  #       run: | 
  #         echo Flows: ${{ steps.filter.outputs.flows_files }} >> $GITHUB_STEP_SUMMARY
  #         echo Code dependency changes: ${{ steps.filter.outputs.code_files }} >> $GITHUB_STEP_SUMMARY
  # maintenance:
  #   runs-on: ubuntu-latest
  #   needs: changes
  #   if: ${{ needs.changes.outputs.prefect_flows_changed == 'true' }}
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v3

  #     - name: Set up Python 3.9
  #       uses: actions/setup-python@v4
  #       with:
  #         python-version: 3.9

  #     - name: Python dependencies
  #       run: |
  #         pip install prefect==$PREFECT_VERSION
  #         pip install .

  #     - name: Prefect Cloud login
  #       run: |
  #         prefect config set PREFECT_API_KEY=${{ secrets.PREFECT_API_KEY }} 
  #         prefect config set PREFECT_API_URL=${{ secrets.PREFECT_API_URL }}

  #     - name: AWS credentials
  #       uses: aws-actions/configure-aws-credentials@v1
  #       with:
  #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         aws-region: ${{ env.AWS_REGION }}
  #         mask-aws-account-id: 'no'

  #     - name: Upload to S3 - maintenance flow
  #       id: maintenance
  #       run: prefect deployment build utilities/maintenance.py:maintenance -n $PROJECT -sb s3/$BLOCK -q $PROJECT -v $GITHUB_SHA -a -t maintenance --interval 10

  # deploy:
  #   needs: [changes, maintenance]
  #   if: ${{ needs.changes.outputs.prefect_flows_changed == 'true' }}
  #   runs-on: ubuntu-latest
  #   strategy:
  #     matrix:
  #       flows: ${{ fromJson(needs.changes.outputs.prefect_flows) }}
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v3

  #     - name: Set up Python 3.9
  #       uses: actions/setup-python@v4
  #       with:
  #         python-version: 3.9

  #     - name: Python dependencies
  #       run: |
  #         pip install prefect==$PREFECT_VERSION
  #         pip install .

  #     - name: Prefect Cloud login
  #       run: |
  #         prefect config set PREFECT_API_KEY=${{ secrets.PREFECT_API_KEY }} 
  #         prefect config set PREFECT_API_URL=${{ secrets.PREFECT_API_URL }}

  #     - name: AWS credentials
  #       uses: aws-actions/configure-aws-credentials@v1
  #       with:
  #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         aws-region: ${{ env.AWS_REGION }}
  #         mask-aws-account-id: 'no'

  #     - name: Deploy flows to S3
  #       id: build
  #       run: |
  #         FLOW_NAME=$(basename ${{ matrix.flows }} .py)
  #         prefect deployment build ${{ matrix.flows }}:$FLOW_NAME -sb s3/$BLOCK -q $PROJECT -v $GITHUB_SHA -a -t $PROJECT -n $PROJECT -o $FLOW_NAME.yaml -ib ecs-task/$BLOCK --skip-upload
  #         prefect deployment build ${{ matrix.flows }}:$FLOW_NAME -sb s3/$BLOCK -q $PROJECT -v $GITHUB_SHA -a -t $PROJECT -n $PROJECT-local --skip-upload
  #         echo "flow_manifest=$FLOW_NAME.yaml" >> $GITHUB_OUTPUT

  #     - name: Upload YAML deployment manifest as artifact
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: Deployment YAML manifests
  #         path: ${{ steps.build.outputs.flow_manifest }}

  # ecr-ecs-build:
  #   needs: changes
  #   if: ${{ needs.changes.outputs.code_dependencies_changed == 'true' }}
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v3

  #     - name: Configure AWS credentials
  #       uses: aws-actions/configure-aws-credentials@v1
  #       with:
  #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         aws-region: ${{ env.AWS_REGION }}
  #         mask-aws-account-id: "no"

  #     - name: Add Secrets to SSM Parameter Store (needed for container in ECS task)
  #       run: |
  #         aws ssm put-parameter --type SecureString --name PREFECT_API_URL --value ${{ secrets.PREFECT_API_URL }} --overwrite
  #         aws ssm put-parameter --type SecureString --name PREFECT_API_KEY --value ${{ secrets.PREFECT_API_KEY }} --overwrite

  #     - name: Login to Amazon ECR
  #       id: login-ecr
  #       uses: aws-actions/amazon-ecr-login@v1

  #     - name: Build, tag, and push image to Amazon ECR
  #       id: build-image
  #       env:
  #         ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
  #         IMAGE_TAG: ${{ github.sha }}
  #       run: |
  #         docker build -t $ECR_REGISTRY/$PROJECT:$IMAGE_TAG .
  #         docker push $ECR_REGISTRY/$PROJECT:$IMAGE_TAG
  #         echo "::set-output name=image::$ECR_REGISTRY/$PROJECT:$IMAGE_TAG"

  #     - name: Flow deployments finished
  #       run: echo "ECR image $ECR_REGISTRY/$PROJECT:$IMAGE_TAG built at $(date +'%Y-%m-%dT%H:%M:%S')" >> $GITHUB_STEP_SUMMARY

  #     - name: Fill in the new image ID in the Amazon ECS task definition
  #       id: task-def
  #       uses: aws-actions/amazon-ecs-render-task-definition@v1
  #       with:
  #         task-definition: ${{ env.ECS_TASK_DEFINITION }}
  #         container-name: ${{ env.PROJECT }}
  #         image: ${{ steps.build-image.outputs.image }}

  #     - name: Deploy Amazon ECS task definition
  #       uses: aws-actions/amazon-ecs-deploy-task-definition@v1
  #       with:
  #         task-definition: ${{ steps.task-def.outputs.task-definition }}
  #         service: ${{ env.ECS_CLUSTER }}/${{ env.PROJECT }}
  #         cluster: ${{ env.ECS_CLUSTER }}
  #         # wait-for-service-stability: true

  #     - name: Upload task definition as artifact
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: ECS task definition
  #         path: ${{ steps.task-def.outputs.task-definition }}

  #     - name: Summary
  #       run: echo 'Prefect agent on AWS ECS successfully redeployed! :rocket:' >> $GITHUB_STEP_SUMMARY